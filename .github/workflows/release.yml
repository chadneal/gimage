# GitHub Actions workflow for releasing gimage
# This workflow runs when you push a git tag (e.g., v0.2.0)

name: Release

# Trigger: When a tag starting with 'v' is pushed
on:
  push:
    tags:
      - 'v*'  # Example: v0.1.0, v1.0.0, v2.1.3

# Permissions needed for the workflow
permissions:
  contents: write  # To create releases and upload assets
  packages: write  # To publish packages

jobs:
  # Job 1: Run tests before releasing
  test:
    name: Test Before Release
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'  # Use Go 1.22+
          cache: true         # Cache Go modules for faster builds

      # Step 3: Download dependencies
      - name: Download dependencies
        run: go mod download

      # Step 4: Run tests
      - name: Run tests
        run: make test

  # Job 2: Create the release (only runs if tests pass)
  release:
    name: Create Release
    needs: test  # Wait for test job to complete successfully
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for changelog generation

      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      # Step 3: Install GoReleaser
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true

      # Step 4: Run GoReleaser
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          # GitHub token for creating releases
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Token for updating Homebrew tap
          # Create this in GitHub Settings > Developer Settings > Personal Access Tokens
          # Add it as a repository secret named HOMEBREW_TAP_TOKEN
          HOMEBREW_TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      # Step 5: Upload artifacts for inspection
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if release fails
        with:
          name: release-artifacts
          path: dist/
          retention-days: 30

  # Job 3: Publish npm package for MCP server (optional)
  npm-publish:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    # Only run if npm package.json exists
    if: hashFiles('npm/package.json') != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        run: cd npm && npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
